package com.cooksys.twitterly.models;

// Generated Apr 28, 2016 5:43:41 PM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "mydb", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class User implements java.io.Serializable
{

	private Integer id;
	private String username;
	private String password;
	private String firstName;
	private String lastName;
	private String emailAddress;
	private Date birthday;
	private Date joinDate;
	@JsonIgnore
	private Set<User> following = new HashSet<User>(0);
	@JsonIgnore
	private Set<User> followers = new HashSet<User>(0);
	@JsonIgnore
	private Set<Tweet> tweets = new HashSet<Tweet>(0);

	public User()
	{
	}

	public User(String username, String password, String firstName,
			String lastName, String emailAddress)
	{
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.emailAddress = emailAddress;
	}

	public User(String username, String password, String firstName,
			String lastName, String emailAddress, Date birthday, Date joinDate,
			Set<User> following, Set<User> followers,
			Set<Tweet> tweets)
	{
		this.username = username;
		this.password = password;
		this.firstName = firstName;
		this.lastName = lastName;
		this.emailAddress = emailAddress;
		this.birthday = birthday;
		this.joinDate = joinDate;
		this.following = following;
		this.followers = followers;
		this.tweets = tweets;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId()
	{
		return this.id;
	}

	public void setId(Integer id)
	{
		this.id = id;
	}

	@Column(name = "username", unique = true, nullable = false, length = 45)
	public String getUsername()
	{
		return this.username;
	}

	public void setUsername(String username)
	{
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 60)
	public String getPassword()
	{
		return this.password;
	}

	public void setPassword(String password)
	{
		this.password = password;
	}

	@Column(name = "first_name", nullable = false, length = 45)
	public String getFirstName()
	{
		return this.firstName;
	}

	public void setFirstName(String firstName)
	{
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 45)
	public String getLastName()
	{
		return this.lastName;
	}

	public void setLastName(String lastName)
	{
		this.lastName = lastName;
	}

	@Column(name = "email_address", nullable = false, length = 45)
	public String getEmailAddress()
	{
		return this.emailAddress;
	}

	public void setEmailAddress(String emailAddress)
	{
		this.emailAddress = emailAddress;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", length = 10)
	public Date getBirthday()
	{
		return this.birthday;
	}

	public void setBirthday(Date birthday)
	{
		this.birthday = birthday;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "join_date", length = 19)
	public Date getJoinDate()
	{
		return this.joinDate;
	}

	public void setJoinDate(Date joinDate)
	{
		this.joinDate = joinDate;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "following", catalog = "mydb", joinColumns = { @JoinColumn(name = "follower_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) })
	public Set<User> getFollowing()
	{
		return this.following;
	}

	public void setFollowing(Set<User> following)
	{
		this.following = following;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "following", catalog = "mydb", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "follower_id", nullable = false, updatable = false) })
	public Set<User> getFollowers()
	{
		return this.followers;
	}

	public void setFollowers(Set<User> followers)
	{
		this.followers = followers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_tweet", catalog = "mydb", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "tweet_id", nullable = false, updatable = false) })
	public Set<Tweet> getTweets()
	{
		return this.tweets;
	}

	public void setTweets(Set<Tweet> tweets)
	{
		this.tweets = tweets;
	}

}
